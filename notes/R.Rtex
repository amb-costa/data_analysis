% nta: 
% introducción a los lenguajes de programación
% exploración de las características y funciones principales
% conceptos básicos de programación en R
% cómo trabajar con información en R
% limpiar, transformar, visualizar, reportar datos en R

\section{Programación en R}
R es un lenguaje de programación utilizado con frecuencia para \textbf{Reproducción de Análisis, Procesamiento de grandes cantidades de datos, y Creación de visualizaciones}, basado en S. Es \textit{Case-Sensitive}. Es \textbf{Accesible, Centrado en Datos, \gls{opnsrc}, y tiene una comunidad de usuarios}. 
Los objetos fundamentales de R son 
\begin{itemize}
    \item {\textbf{Operador de Asignación}: <- en vez de =}
    \item {\textbf{Operadores Lógicos/Normales}: AND (\&\& o \&) OR (| o ||) NOT (!)}
    \item {\textbf{Operadores lógicos de elemento inteligente}: \&, |}
    \item {\textbf{Operadores relacionales o comparadores}: <, >, <=, =>, ==, !=}
    \item {\textbf{Funciones}: secciones de código reutilizable, usados para realizar tareas en específico}
    \item {\textbf{Comentarios - \#}}
    \item {\textbf{Variables}: representación de un valor que se puede guardar para usos futuros. Se asignan con el \textbf{operador de asignación <-}. \textit{siempre debieran empezar con una letra}}
    \item {\textbf{\textit{datatypes}}}
\end{itemize}


\subsection{Estructuras de Datos}
\begin{itemize}
    \item {\textbf{Vectores}: Grupo de elementos de datos del mismo tipo, guardados en secuencia. \textit{c(v1,v2,...)} crea un vector, con sus valores separados por comas
    \begin{itemize}
        \item {Atómicos: no se puede tener un vector de valores numéricos y lógicos. \textit{Seis tipos primarios: lógicos (bool), enteros (integer, positivos y negativos), dobles (decimales), caracter(strings), complejos y sin formato}. Algunas funciones comunes son \textit{typeof, length, is.logical, is.double, is.integer, is.character()}}
        \item {Listas: admiten elementos de cualquier tipo. \textit{ej: list(x,y,8,TRUE)}}
    \end{itemize}
    \begin{lstlisting}[language=R]
    # ejemplo de vector
    x = c(1,3,5)
    names(x) = c("a","b","c")
    print(x)
    # > a b c
    # > 1 3 5

    # ejemplo de lista
    str(list("a", 1, 1.5, TRUE)
    # > List of 4
    #> $ : chr a
    #> $ : int 1
    #> $ : num 1.5
    #> $ : logi TRUE
    list('Chicago' = 1, 'New York' = 2)
    \$Chicago
    1
    \$New York
    2\end{lstlisting}}
    \item {\textbf{\textit{Data Frame} - Marco de Datos}: conjunto de columnas que contienen datos, de forma similar a las hojas de cálculo y las tablas SQL. Los nombres de columnas debieran representar la variable, y se muestran en la parte superior, y una observación por fila. Los marcos pueden incluir tipos diferentes de datos, pero los elementos de una misma columna deben ser del mismo tipo, y las columnas deben tener el mismo número de filas
    \begin{lstlisting}[language=R]
    # marco en filas y columnas ordenadas
    # data-frame simplificado, considerar tibbles a futuro

    # lista de conjunto de datos precargados
    data()
        
    # cargar data-frame en el entorno
    data("data_name") 
    View(data_name) # en mayúsculas
    head(data_name) # 6 primeras entradas
    str(data_name) # ESTRUCTURA, no string
    #> nombres de columnas y tipos de datos por columna
    colnames(data_name) # solo nombres

    # renombrar cada col_name en data_frame según función
    # ej: tolower toupper
    rename_with(data_frame,function)

    # revision de los nombres de col_names
    # solo contienen caracteres, números y guiones bajo
    clean_names(data_frame)

    data.frame(x=c(1,2,3), y=c(1.5,5.5,7.5))
    #     x y
    # [1] 1 1.5
    # [2] 2 5.5
    # [3] 3 7.5\end{lstlisting}}
    \item {\textbf{Matrices}: conjunto bidireccional de elementos de datos
    \begin{lstlisting}[language=R]
    # crear matriz de 2x3 con 2 filas
    # puede reemplazarse por ncol
    # en este caso, rellena por columnas
    matrix(c(3:8), nrow=2)
    #       [,1] [,2] [,3]
    # [1,]  3   5   7  
    # [2,]  4   6   8\end{lstlisting}}
    \item {Rangos}
\end{itemize}

\subsection{Convenciones de Código en R}
\subsubsection{Estilos}
\begin{itemize}
    \item {Los archivos deben tener un nombre con significado, y deben terminar con \textbf{.R}\textit{(mayúscula)}}
    \item {Los nombres de variables son generalmente sustantivos, y se escriben en minúscula, usar guión bajo para separar palabras en vez de espacios}
    \item {Los nombres de funciones se escriben en minúscula, y deben ser verbos}
\end{itemize}
\subsubsection{Sintaxis}
\begin{itemize}
    \item {Confirmar \textit{case-sensitivity} y cierre de todos los paréntesis}
    \item {Los operadores se rodean de espacio}
    \item {Los espacios se colocan \textbf{después} de la coma, no antes}
    \item {No se añaden espacios alrededor de un código entre paréntesis o corchete}
    \item {Debe haber un espacio antes del paréntesis izquierdo, a menos que se llame a una función}
    \item {La llave de apertura nunca debe ir en su propia línea, siempre debe ir seguida de una línea nueva. Una llave de cierre siempre debe ir en su propia línea a menos que la siga una instrucción \textit{else}}
    \item {Para sangrías, usar dos espacios en vez de tabular}
    \item {No sobrepasar los 120 caracteres por línea, ojalá limitar a 80}
    \item {Utilizar \textbf{<-} para asignar en vez de \textbf{=}}
    \item {Añadir comentarios con \textbf{\#} más un espacio}
    \item {Recordar que hay paquetes de estilo/\textit{linters} que siguen reglas de formato específicas}
    \item {\begin{lstlisting}[language=R]
    # espacio extra alrededor de un código
    # espacio extra antes del paréntesis izquierdo
    if ( debug ) do (x)
    species[ "delfin" , ]

    # comentario bien escrito
    # asignacion con flecha
    # falta de espacios en parentesis
    # sangrias en codigo
    # lineas con pocos caracteres
    x <- 7
    if (x>0) {
        print("aqui hay sangria")
    } else {
        print("aqui tambien")
    }\end{lstlisting}}
\end{itemize}



\subsection{Paquetes}
Los \textbf{paquetes}, en el contexto R, son unidades de código reproducible. Incluyen \textbf{funciones reutilizables, documentación para las funciones, \textit{datasets} para extraer \textit{samples}, y pruebas integradas}. La instalación base de R incluye el paquete \textbf{BaseR}, y se puede instalar otros paquetes en sitios como \textbf{CRAN\textit{(Comprehensive R Archive Network)}}: un archivo online con paquetes de R, código fuente, manuales y documentación. Los paquetes se instalan, y luego se invocan en forma de librería. Considerar que la versión de R puede crear conflictos con algunos paquetes, y es necesario investigar alternativas. También se generan conflictos cuando los paquetes contienen funciones de nombres similares
\begin{lstlisting}[language=R]
# obtener los paquetes instalados
installed.packages()
    
# cargar y llamar paquetes
install.package("package_name")
library(package_name)

# crear carpeta nueva o directorio
dir.create("destiny_folder")

# crear archivo, si se crea R devuelve TRUE
file.create("name.txt") #o .docx, .csv... 

# copiar archivo a una carpeta
file.copy("name_file.txt", "destiny_folder")

# elimina un archivo
unlink("some_file.csv")\end{lstlisting}

\subsubsection{.lubridate}
R tiene tres \textit{datatype} que hacen referencia al tiempo: \textbf{fecha(\textit{"YYYY\_MM\_DD"}), hora(\textit{"20:11:59 UTC"}), fecha+hora(\textit{"2018-03-31 18:15:48 UTC"})}. \textit{Las horas se expresan en UTC}. \textbf{lubridate} es parte de \textbf{tidyverse}, que se debe instalar
\begin{lstlisting}[language=R]
    # funciones clásicas para fechas 
    today()
    #> [1] "2025-01-05"
    now()
    #> [1] "2025-01-05 02:38:51 UTC"

    # instalar lubridate
    install.package("tidyverse")
    library(tidyverse)
    library(lubridate)

    # algunas funciones de lubridate
    # convertir fechas en base a un string
    ymd("2021-01-20")
    #> [1] "2021-01-20"
    mdy("January 20th, 2021")
    #> [1] "2021-01-20"
    dmy("20-jan-2021")
    #> [1] "2021-01-20"
    ymd(20210120)
    #> [1] "2021-02-20"

    # creando fecha-hora
    ymd_hms("2021-01-20 20:11:59")
    #> [1] "2021-01-20 20:11:59 UTC")
    mdy_hm("01-20-2021 08:01")
    #> [1] "2021-01-20 08:01:00 UTC"
    as_date(now()) # conversion fecha-hora en solo fecha
    #> [1] "2025-01-05"
\end{lstlisting}


\subsubsection{.tidyverse}
Sistema de paquetes con un diseño común, y enfoque en la manipulación de datos, su exploración y visualización. Contiene ocho paquetes núcleo: \textbf{ggplot2 \textit{(visualización de datos, propiedades visuales)}, tidyr \textit{(limpieza de datos)}, dplyr \textit{(importación de datos)}, tibble \textit{(funciones comunes para manipulación de datos)}, readr, purrr, forcats, stringr}
\begin{itemize}
    \item {\textbf{Factores}: almacenamiento de datos categóricos en R, cuando los valores son limitados y se limitan a grupos finitos como países y años}
    \item {\textbf{Pipas - Pipe (\%>\%)}: herramienta que expresa una secuencia de operaciones múltiples. Esto aprovecha las \textbf{funciones anidadas}: funciones contenidas completamente dentro de otra función
    \begin{lstlisting}[language=R]
    # ejemplo de pipa
    # funcion_1 se aplica a data_set
    # funcion_2 se aplica a data_set.funcion_1
    data_set %>% 
        funcion_1 %>%
        funcion_2 %>%
        funcion_final # pipas excepto en la última fila\end{lstlisting}}
    \item {\textbf{Tibble}: forma simplificada de \textit{dataframes}. No cambian los tipos de datos en los inputs, los nombres de las variables, ni crean nombres para filas; esto simplifica la impresión de la información. Esto sigue la estandarización \textbf{Tidy Data} en R, donde la organización de datos se traduce en su estructura: las variables se organizan en columnas, las observaciones se organizan en filas, y cada valor tiene su propia celda. \textbf{as\_tibble(data\_name) : devuelve tabla de 10 primeras filas del marco de datos original}}
    \begin{lstlisting}[language=R]
    # ejemplo de funciones con pipas
    # entregan TIBBLES con resultados
    
    penguins %>%
    {
      # entrega la columna solicitada
      select(col_name) %>%

      # entrega todo menos la columna solicitada
      select(-col_name) %>%

      # cambia el nombre de old_col a new_name
      rename(new_name=old_col)

      # ordena de acuerdo a una columna en ascendente
      # para descendente, usar -col
      arrange(col)
        
      # agrupa de acuerdo a una columna
      group_by(island) %>%

      # ignora celdas NA pero elimina filas
      drop_na() %>%
        
      # promedio de cada isla de acuerdo a col_name
      summarize (mean = mean(col_name)) %>%

      # divide una columna en dos, asigna nombres
        de acuerdo a un separador entregado
      separate(data_frame, col, into=c("newname1","newname2"),
        sep="{separator_choice}") %>%

      # une dos columnas en una, con un separador entregado
      unite(data_frame,"newcolname",col1,col2,sep="{sep}") %>%

      # entrega un filtro con la columna consultada
      filter(species == "spec_name") %>%

      # modifica la variable de acuerdo a condiciones
      mutate(new_variable, newcol = {conditions}) %>%
      }  
    \end{lstlisting}
    \item {\textbf{readr}: manejo de datos rectangulares (rectángulo perfecto de filas y columnas). Algunos tipos de archivos para almacenamiento de datos rectangulares: \textbf{.csv, .tsv\textit{(tabulación)}, .fwf\textit{(de ancho fijo)}, .log\textit{(eventos de sistemas operativos o software)}}
    \begin{lstlisting}[language=R]
        # funciones de readr
        # también read_tsv, read_delim (archivos delimitados en general),
        #   read_fwf, read_table (archivos tabulares cuyas columnas se 
        #   separan por espacios en blanco)
        read_csv() 

        # excepción .log, pero funciona de manera similar
        # se entrega ruta de acceso, se devuelve un tibble
        read_log()

        # archivos de muestra
        readr_example() 

        # lector del archivo csv de nombre mtcars.csv
        # que se encuentra en los archivos de muestra
        # entrega especificación de columnas y un tibble
        readr_csv(readr_example("mtcars.csv"))

        # paquete para importar hojas de cálculo
        # PARTE DE TIDYVERSE pero no del núcleo, se debe cargar
        library(readxl)

        # similar a readr_csv
        read_excel(readxl_example("type-me.xlsx")) 

        # nombres de las hojas individuales
        excel_sheets(readxl_example("type-me.xlsx"))

        # devuelve tibble de la hoja mencionada
        read_excel(readxl_example("type-me.xlsx"), sheet="sheet_name")

        # skimr <- resumen de datos, revisión superficial
        # janitor <- limpieza de datos
        install.packages("skimr")
        install.packages("janitor")

        # revisión superficial de datos
        skim_without_charts(data_frame)
        glimpse(data_frame) # más corto que skim\end{lstlisting}}  
\end{itemize}

\subsubsection{.ggplot2 y \textit{DataViz}}
Durante el proceso de DataViz, se hace necesario utilizar funciones que derivan de la estadística, además de conceptos de formateo de datos.
Recordar \textit{datos en formato ancho y largo}
Existen varios paquetes para \textit{DataViz} como \textbf{ggplot2}(el más popular), Plotly, Lattice, RGL, Dygraphs, Leaflet, Highcharter, Patchwork, gganimate, ggridges. Los beneficios de ggplot2 \textit{(grammar of graphics)} son: crear distintos tipos de gráficos, editar el estilo y sensación de los gráficos, crear visuales de alta calidad, combinar manipulación y visualización de datos utilizando pipas. Los gráficos se construyen en capas, por lo que cada línea debe terminar con +
Se recomienda filtrar la información antes de graficar con otros paquetes como \textbf{.dplyr}
Los aspectos núcleo del gráfico son
\begin{itemize}
    \item {\textit{aesthetic}: propiedad visual de un objeto como \textit{tamaño, forma, color}. Se pueden aplicar al gráfico completo o a una capa en específico al llamar dentro o fuera del \textit{mapping}}
    \item {\textit{geom}: objeto geométrico elegido para representar los datos. Se pueden utilizar dos geom en el mismo gráfico}
    \item {\textit{facet}: muestra de grupos o subsets de datos, en formatos pequeños. \textit{Funcionan como otra capa del diagrama}, añadir después de \textbf{GEOM\_FUNCT +}
    \begin{lstlisting}[language=R]
    # dos funciones

    # variables singulares
    # equivalente a facet_grid con una dimensión (~col2)
    facet_wrap(~col)

    # crea una matriz con dos variables
    # col1 vertical como "filas"
    # col2 horizontal como "columnas"
    facet_grid(col1~col2)\end{lstlisting}}
    \item {\textit{labels + annotation}: añadir notas a un documento o diagrama, para explicar o comentar aspectos. \textit{Funcionan como otra capa del diagrama} y se añaden después de \textbf{GEOM\_FUNCT +}. También es posible añadir líneas, flechas y formas al diagrama con ggplot2
    \begin{lstlisting}[language=R]
    # orden de etiquetas + notas
    labs(title="plot_title", subtitle="plot_subtitle",
      caption="plot_caption") +
    annotate("text", x=x_coord, y=y_coord, label="plot_text",
      color="", fontface="bold/cursive/whatever", size=4.5, angle=25)
        
    \end{lstlisting}}
\end{itemize}
\begin{lstlisting}[language=R]
# exportar archivos con ggplot2
# form like png, jpeg...
ggsave("file_name.form")

# exportar sin ggplot
png()
pdf()

# transformar a formato dato ancho
pivot_wider() # - filas + columnas

# transformar a formato dato largo
pivot_longer() # + filas - columnas

# promedio de una pregunta
mean(col)

# desviación estandar en una columna
sd(col)

# correlacion entre columnas
cor(col1, col2)

# sesgo entre valores predichos y los obtenidos
# mientras más cerca a cero, mejor
bias(actual_value, predicted_value)

# entrega muestreo aleatorio
sample(data_frame)

# mapping: define una variable del dataset como una estética
# x, y= nombres de la estética
# aquí todas las estéticas dentro de mapping
ggplot(data=DATA) +
  <GEOM_FUNCTION>(mapping=aes(x=col1, y=col2, {...aesthetic_mapping})

# {...aesthetic_mapping}: estéticas para editar
# dentro de mapping: aplica a columnas condicional
# fuera de mapping: aplica a todas las columnas
{
  # color exterior distinto para c/variable en col
  color = (col)

  # forma distinta a c/variable en col
  shape = (col)

  # tamaño distinto para c/variable en col
  size = (col)

  # se rellena cada barra con un color(ver geom_bar)
  fill = (col)
  
  # opacidad distinta a c/variable de la col
  # a más grande la variable, más opaco
  alpha = (col)
}

# <GEOM_FUNCTION>: funciones de objeto geométrico
# reemplazar _FUNCTION con forma seleccionada
{
  _point()

  # NO se añade aes=y
  # la función cuenta filas donde está la variable en x
  # si fill recibe una columna distinta a aes_x, 
  #    se crea un gráfico de barras apilado
  _bar(mapping=aes(x=col, fill=other_col))

  _line()

  # suavizado: detecta tendencia en datos
  # otra capa de diagrama, dos tipos:
  #   LOESS para >1000 puntos
  #   GAM para cantidades grandes de puntos
  _smooth(method={"loess", "gam"}, formula=y~s(x)
  
  # separa por valores en columna
  # diferente línea, direrente tipo de línea para cada col
  _smooth(mapping=aes(x,y,linetype=col)

  # añade ruido aleatorio a cada punto en el gráfico
  # evita overplotting: los puntos se superponen entre si
  _jitter({...})  
}\end{lstlisting}

\subsubsection{.rmarkdown}
\textbf{Markdown} es un syntax para formatear archivos de texto simple; diseñado originalmente para \textit{output} en HTML: etiquetas y código utilizado en las páginas web. \textbf{RMarkdown} es un archivo de formato para realizar documentos dinámicos con R con herramientas como \textbf{Rnotebook}: \textit{notebook} que permite ejecutar código, y mostrar visualizaciones del código como gráficos y tablas. Similar a otros notebooks como \textit{Jupyter, Kaggle, Google Collab...}. Es dinámico, así que cambia a medida que el código lo hace. Una vez se instala el paquete, se convierte un reporte con texto, código y resultados a través de \textbf{knit}
\begin{lstlisting}[language=R]
install.packages("rmarkdown")
---
# YAML = "lenguaje para traducir la metadata de estos datos, 
        en un formato legible, se llama con tres guiones
        al inicio del documento"
        
# se puede modificar el tipo de archivo en esta área
# html_document = mejor para compartir con stakeholders
# html_notebook = incluye copia del código fuente, útil para
#   compartir con otros analistas o científicos de datos
# pdf_document(usa latex), word_document, github_document, 
#   odt_document(open document text), rtf_format(enriched-text 
#   format), md_document(doc en markdown)

# YAML para presentaciones
# beamer_presentation(pdf), ioslides_presentation(HTML),
#   slidy_presentation(HTML), powerpoint_presentation
# presentacion en HTML con reveal.js
# es un framework, se necesita el paquete
# revealjs::revealjs_presentation

# YAML para paneles = requiere paquete flexdashboard
# Shiny: genera apps de web interactivo usando código en R
#   incrustar animaciones en documentos RMarkdown, o alojar
#   ejpágina web
# runtine: shiny

# Otros paquetes/formatos de salida
# bookdown = libros y artículos
# prettydoc = temas atractivos
# rticles = plantillas para revistas y editoriales
---
    
# para titulos más pequeños
## añadir más whashtags
### recordar un espacio después del #

*texto en cursiva*
**texto en negrita**

# solo muestra nombre_link
[nombre_link](url_link)

# solo muestra nombre_imagen
![nombre_imagen](url_link)

# code chunk: ejecuta código en un documento .Rmd
```{r nombre_chunk}
  # insertar codigo entre backticks
```
\end{lstlisting}





\subsection{Pautas para nombres de Archivos}
\begin{itemize}
    \item {Nombres de largo razonable}
    \item {Guiones bajos}
    \item {Empezar un nombre con letra, terminar con números}
    \item {Formatos de fecha estándar AAAA\_MM\_DD}
    \item {Nombres de archivo que funcionen bien con el orden predeterminado \textit{(cronológico, lógico utilizando números primero...}}
\end{itemize}

\subsection{Evitar}
\begin{itemize}
    \item {Caracteres adicionales innecesarios}
    \item {Usar espacios o caracteres \textit{ilegales} como \&, \%, \#, <, >}
    \item {Empezar o terminar con símbolos}
    \item {Formatos de fecha incompletos o incoherentes como \textit{M-D-AA}}
    \item {Sistema aleatorio de números o fechas}
\end{itemize}



\newpage
